Import packages 
library(tidyverse); library(tseries); 
library(timeSeries); library(quantmod); 
library(forecast); 
library(urca); 
library(fGarch); 
library(readxl); 
library(tidyquant); library(timetk); 
library(cowplot); 
library(YieldCurve); library(ustyc); 

Import US Treasury yields 
ust <- read.csv("Treasury Yield.csv") 
colnames(ust) <- c('Date', 'Year2', 'Year3', 'Year5', 'Year7', 'Year10', 'Year30') ust$Date<- format(as.Date(ust$Date, "%b %d, %Y"), "%m/%d/%Y") 
ust10<- ust[1:26,] 
ust11<- ust[27:50,] 
head(ust10,3) 

##	Date Year2 Year3 Year5 Year7 Year10 Year30 ## 1 10/01/2019 1.542 1.494 1.489 1.571	1.635	2.091 ## 2 10/02/2019 1.484 1.435 1.435 1.528	1.601	2.088 ## 3 10/03/2019 1.392 1.351 1.349 1.450	1.534	2.031 

head(ust11,3) 

##	Date Year2 Year3 Year5 Year7 Year10 Year30 ## 27 11/01/2019 1.554 1.546 1.544 1.630	1.714	2.193 ## 28 11/03/2019 1.554 1.546 1.544 1.630	1.714	2.193 ## 29 11/04/2019 1.588 1.593 1.598 1.692	1.780	2.267 


1.2 Import your gold ETF prices for the months of October 2019 and November 2019 

Getting the Data using getSymbols() 
GLD <- getSymbols('GLD', from="2019-10-01", to = "2019-11-30", 
src='yahoo', auto.assign=F) 
GLD10 <- GLD$GLD.Adjusted['2019-10'] 
GLD11 <- GLD$GLD.Adjusted['2019-11'] 
head(GLD10,3) 

##	GLD.Adjusted ## 2019-10-01		139.63 ## 2019-10-02		141.26 ## 2019-10-03		141.90 

head(GLD11,3) 

##	GLD.Adjusted ## 2019-11-01		142.56 ## 2019-11-04		142.15 ## 2019-11-05		139.85 

1.3 Import your equity ETF price for the months of October 2019 and November 2019 

Getting the Data using getSymbols() 
ISF <- getSymbols("ISF.L", from="2019-10-01", to = "2019-11-30", 
src="yahoo", auto.assign=F) 
ISF10 <- ISF$ISF.L.Adjusted['2019-10'] 
ISF11 <- ISF$ISF.L.Adjusted['2019-11'] 
head(ISF10,3) 

##	ISF.L.Adjusted ## 2019-10-01		7.195469 ## 2019-10-02		6.961470 ## 2019-10-03		6.927759 

head(ISF11,3) 

##	ISF.L.Adjusted ## 2019-11-01		7.163741 ## 2019-11-04		7.228189 ## 2019-11-05		7.246037 





4   



2 Data Processing 

2.1 Compute the daily returns of your Gold ETF and your Equity ETF 

For gold ETF: 
gld_daily_returns <- diff(log(GLD$GLD.Adjusted)) print(t(gld_daily_returns)) 

##	2019-10-01 2019-10-02	2019-10-03 2019-10-04	2019-10-07 
## GLD.Adjusted			NA 0.01160603 0.004520413		0 -0.008563639 
##		2019-10-08	2019-10-09	2019-10-10	2019-10-11	2019-10-14 
## GLD.Adjusted 0.008704602 0.000915625 -0.00876768 -0.005554771 0.003991146 ##	2019-10-15	2019-10-16	2019-10-17	2019-10-18 
## GLD.Adjusted -0.006994996 0.005713914 0.001423365 -0.001067307 
##	2019-10-21	2019-10-22	2019-10-23 2019-10-24	2019-10-25 
## GLD.Adjusted -0.004781554 0.002928707 0.002351029 0.00709072 0.002328961 
##	2019-10-28		2019-10-29		2019-10-30	2019-10-31 
## GLD.Adjusted -0.008637236 -0.002776882 0.005475208 0.009948849 
##	2019-11-01		2019-11-04		2019-11-05 2019-11-06		2019-11-07 ## GLD.Adjusted 0.0009123479 -0.002880154 -0.01631233 0.00428107 -0.01564321 ##	2019-11-08		2019-11-11		2019-11-12	2019-11-13		2019-11-14 ## GLD.Adjusted -0.006384735 -0.002404818 0.002695874 0.003994072 0.004194712 ##	2019-11-15	2019-11-18		2019-11-19	2019-11-20 
## GLD.Adjusted -0.002529112 0.002962022 0.0005049007 0.000504545 
##	2019-11-21		2019-11-22			2019-11-25		2019-11-26 
## GLD.Adjusted -0.005492101 -0.001885799 -0.004803175 0.004803175 
##	2019-11-27	2019-11-29 
## GLD.Adjusted -0.005314007 0.006184805 

For Equity ETF: 
ISF_daily_returns <- diff(log(ISF$ISF.L.Adjusted)) print(t(ISF_daily_returns)) 

##	2019-10-01	2019-10-02	2019-10-03 2019-10-04	2019-10-07 ## ISF.L.Adjusted				NA -0.03306086 -0.004854275 0.01180916 0.005360316 ##		2019-10-08 2019-10-09	2019-10-10	2019-10-11 2019-10-14 ## ISF.L.Adjusted -0.007626059 0.00339662 0.003525844 0.008551283 -0.0043367 ##			2019-10-15	2019-10-16	2019-10-17	2019-10-18 
## ISF.L.Adjusted -0.0005607777 -0.00689713 0.002820816 -0.004092855 
##	2019-10-21	2019-10-22		2019-10-23 2019-10-24	2019-10-25 ## ISF.L.Adjusted 0.001413198 0.008017526 0.005309527 0.01081096 -0.001931932 ##	2019-10-28		2019-10-29		2019-10-30		2019-10-31 
## ISF.L.Adjusted 0.001380372 -0.003454231 0.004281457 -0.01136537 
##	2019-11-01 2019-11-04	2019-11-05	2019-11-06	2019-11-07 ## ISF.L.Adjusted 0.007083913 0.00895619 0.002466178 0.0009573065 0.002048507 ##		2019-11-08			2019-11-11		2019-11-12			2019-11-13 
## ISF.L.Adjusted -0.005746371 -0.006193612 0.005095476 -0.001237071 
##		2019-11-14			2019-11-15		2019-11-18		2019-11-19 
## ISF.L.Adjusted -0.005931543 0.0006914307 0.001243567 0.002344687 
##		2019-11-20			2019-11-21 2019-11-22		2019-11-25 

5   



## ISF.L.Adjusted -0.007744447 -0.003755471 0.01273903 0.009176272 ##	2019-11-26	2019-11-27	2019-11-28	2019-11-29 ## ISF.L.Adjusted 0.001226284 0.003262576 -0.000543024 -0.009688279 

3 Data Summaries 

3.1 For the month of October, compute the average yield for each benchmark security. Repeat the average calculation for November. 

Average yield for October 2019: 
ust10_avg<- apply(ust10[sapply(ust10, is.numeric)], 2, mean) print(ust10_avg) 

##	Year2	Year3	Year5	Year7	Year10	Year30 ## 1.551385 1.527154 1.525115 1.614000 1.701423 2.187269 

Average yield for November 2019: 
ust11_avg<- apply(ust11[sapply(ust11, is.numeric)], 2, mean) print(ust11_avg) 

##	Year2	Year3	Year5	Year7	Year10	Year30 ## 1.616750 1.618042 1.641167 1.736833 1.811625 2.276708 

3.2 For the month of October, compute the average price the Gold ETF. Repeat the average calculation for November. 

print(paste("The average price of Gold ETF for October 2019 is", round(mean(GLD10),2))) 

## [1] "The average price of Gold ETF for October 2019 is 140.87" 

print(paste("The average price of Gold ETF for November 2019 is", round(mean(GLD11),2))) 

## [1] "The average price of Gold ETF for November 2019 is 138.57" 

3.3ForthemonthofOctober, computetheaveragepricetheEquityETF.Repeat the average calculation for November. 

print(paste("The average price of Equity ETF for October 2019 is", round(mean(ISF10),2))) 

## [1] "The average price of Equity ETF for October 2019 is 7.08" 

print(paste("The average price of Equity ETF for November 2019 is", round(mean(ISF11),2))) 

## [1] "The average price of Equity ETF for November 2019 is 7.22" 



7   



3.4 For the month of October, compute the standard deviation for each bench- mark security. Repeat the average calculation for November. 

Standard deviation for October 2019: 
ust10_sd<- apply(ust10[sapply(ust10, is.numeric)], 2, sd) print(ust10_sd) 

##	Year2	Year3	Year5	Year7	Year10	Year30 ## 0.08092519 0.09603028 0.10353408 0.10078849 0.10431919 0.10314633 

Standard deviation for November 2019: 
ust11_sd<- apply(ust11[sapply(ust11, is.numeric)], 2, sd) print(ust11_sd) 

##	Year2	Year3	Year5	Year7	Year10	Year30 ## 0.03423734 0.04510613 0.05605794 0.06333326 0.06885259 0.08127488 

3.5 For the month of October, compute the standard deviation of the Gold ETF. Repeat the average calculation for November. 

print(paste("The average price of Equity ETF for October 2019 is", round(sd(GLD10),5))) 

## [1] "The average price of Equity ETF for October 2019 is 0.83123" 

print(paste("The average price of Equity ETF for November 2019 is", round(sd(GLD11),5))) 

## [1] "The average price of Equity ETF for November 2019 is 1.56209" 

3.6 For the month of October, compute the standard deviation of the Equity ETF. Repeat the average calculation for November. 

print(paste("The average price of Equity ETF for October 2019 is", round(sd(ISF10),5))) 

## [1] "The average price of Equity ETF for October 2019 is 0.07966" 

print(paste("The average price of Equity ETF for November 2019 is", round(sd(ISF11),5))) 

## [1] "The average price of Equity ETF for November 2019 is 0.05195" 





8   



4 Graphing 

4.1 Graph the 6 benchmark securities for the 2 months on 1 plot.  That means the 6 yield series are overlaid on the same area. Add a legend 

ggplot(ust, aes(x=Date)) + 
geom_line(aes(y = Year2, group=1, colour = "Year02")) + 
geom_line(aes(y = Year3, group=1, colour="Year03")) + 
geom_line(aes(y = Year5, group=1, colour = "Year05")) + 
geom_line(aes(y = Year7, group=1, colour="Year07")) + 
geom_line(aes(y = Year10, group=1, colour = "Year10")) + 
geom_line(aes(y = Year30, group=1, colour="Year30")) + 
labs(x="Date",	y="Yields", title = "US Treasury Yields Oct2019-Nov2019") + 
theme(axis.text.x = element_text(angle = 90)) + 
theme(legend.position=c(0.1, 0.7)) 

4.2 On a separate graph,  plot the gold ETF prices (not returns!)	for the 2 months. Use the left-side axis for the price label 

GLD_plot<- ggplot(GLD$GLD.Adjusted, aes(x = Index, y = GLD.Adjusted))+ 
geom_line(color="red") + 
ggtitle("GLD Oct2019-Nov2019") + 
labs(x = "Date", "Adjusted Price") + 
scale_y_continuous(position = "left")+ 
labs(x = "Date", y = "Adjusted Price") 

print(GLD_plot) 
ISF_plot<- ggplot(ISF$ISF.L.Adjusted, aes(x = Index, y = ISF.L.Adjusted))+ 
geom_line(color="blue") + 
ggtitle("ISF.L Oct2019-Nov2019") + 
labs(x = "Date", "Adjusted Price") + 
scale_y_continuous(position = "right")+ 
labs(x = "Date", y = "Adjusted Price") 
plot_grid(GLD_plot, ISF_plot, 
#labels = c("GLD", "ISF.L"), 
ncol = 2, nrow = 1) 

ust_y2 <- xts(ust$Year2, order.by = as.Date(ust$Date, "%m/%d/%Y")) 
ust_y3 <- xts(ust$Year3, order.by = as.Date(ust$Date, "%m/%d/%Y")) 
ust_y5 <- xts(ust$Year5, order.by = as.Date(ust$Date, "%m/%d/%Y")) 
ust_y7 <- xts(ust$Year7, order.by = as.Date(ust$Date, "%m/%d/%Y")) 
ust_y10 <- xts(ust$Year10, order.by = as.Date(ust$Date, "%m/%d/%Y")) 
ust_y30 <- xts(ust$Year30, order.by = as.Date(ust$Date, "%m/%d/%Y")) 
ust_xts = merge(ust_y2, ust_y3, ust_y5, ust_y7, ust_y10, ust_y30); maturity <- c(2,3,5,7,10,30) ust10_xts<- tk_xts(data=ust_xts['2019-10']) ## convert to xts object 
NSParameters_oct <- Nelson.Siegel( rate=ust10_xts, maturity=maturity ) ## fit into Nelson-Siegel y_oct <- NSrates(NSParameters_oct[26,], maturity) 
plot(maturity,ust10_xts[26,],main="Fitting Nelson-Siegel yield curve for Oct2019", type="o") 
lines(maturity,y_oct, col=2) 
legend("topleft",legend=c("observed yield curve","fitted yield curve"), 
col=c(1,2),lty=1) 

ust11_xts<- tk_xts(data=ust_xts['2019-11']) 
NSParameters_nov <- Nelson.Siegel( rate=ust11_xts, maturity=maturity ) y_nov <- NSrates(NSParameters_nov[24,], maturity) 
plot(maturity,ust11_xts[24,],main="Fitting Nelson-Siegel yield curve for Nov2019", type="o") lines(maturity,y_nov, col=2) 
legend("topleft",legend=c("observed yield curve","fitted yield curve"), 
col=c(1,2),lty=1) 

NSP_oct <- fortify(NSParameters_oct) 
NSP_nov <- fortify(NSParameters_nov) 
ggplot(NSP_oct, aes(x= Index, y= beta_1, color='Beta1'))	+ 
geom_line() + 
geom_line(data=NSP_oct, aes(Index, y=beta_2, color='Beta2')) + 
geom_line(data=NSP_oct, aes(Index, y=beta_0, color='Beta0')) + 
geom_line(data=NSP_oct, aes(Index, y=lambda, color='lambda')) + 
labs(color="Legend")+ 
labs(x="Date",	

ggplot(NSP_nov, aes(x= Index, y=beta_1, color='Beta1'))	+ 
geom_line() + 
geom_line(data=NSP_nov, aes(Index, y=beta_2, color='Beta2')) + 
geom_line(data=NSP_nov, aes(Index, y=beta_0, color='Beta0')) + 
geom_line(data=NSP_nov, aes(Index, y=lambda, color='lambda')) + 
labs(color="Legend")+ 
labs(x="Date",	y="Parameters", title = "Nelson-Siegel Parameters Nov 2019") 

GLD10_demeaned <- GLD10 - mean(GLD10) 
par(mfrow=c(2,1)) 
plot(GLD10, main = 'GLD10') 
plot(GLD10_demeaned, main='GLD10 demeaned') 


Augmented Dickey Fuller (ADF) Test 
Note: Instead of using adf.test() function, we used ur.df() function which give us more control on how we want to carry out the Dickey Fuller Test. 
If we apply ADF test on GLD10, p-value is greater than 0.05 which implies that GLD10 is not stationary. 
## classic unit root eqn: z.diff ~ z.lag1 + e 
GLD10_df_test <- ur.df(GLD10, type='none', lags=0) summary(GLD10_df_test) 

## 
## ############################################### 
## # Augmented Dickey-Fuller Test Unit Root Test # 
## ############################################### 
## 
## Test regression none 
## 
## 
## Call: 
## lm(formula = z.diff ~ z.lag.1 - 1) 
## 
## Residuals: 
##	Min	1Q	Median		3Q		Max 
## -1.3660 -0.7246	0.1400	0.6129	1.5062 
## 
## Coefficients: 
##	Estimate Std. Error t value Pr(>|t|) 
## z.lag.1 0.0008867	0.0013174	0.673	0.508 
## 
## Residual standard error: 0.87 on 21 degrees of freedom 
## Multiple R-squared:	0.02112,	Adjusted R-squared:	-0.0255 ## F-statistic: 0.4531 on 1 and 21 DF,	p-value: 0.5082 
## 
## 
## Value of test-statistic is: 0.6731 
## 
## Critical values for test statistics: 
##	1pct	5pct 10pct 
## tau1 -2.66 -1.95	-1.6 














19   



If we apply ADF test on GLD10 demeaned, p-value is smaller than 0.05 implying demeaning does help to achieve some form of stationarity. 
## classic unit root eqn: z.diff ~ z.lag1 + e 
GLD10_demeaned_df_test <- ur.df(GLD10_demeaned, type='none', lags=0) summary(GLD10_demeaned_df_test) 

## 
## ############################################### 
## # Augmented Dickey-Fuller Test Unit Root Test # 
## ############################################### 
## 
## Test regression none 
## 
## 
## Call: 
## lm(formula = z.diff ~ z.lag.1 - 1) 
## 
## Residuals: 
##	Min	1Q	Median		3Q		Max 
## -1.15122 -0.53286 -0.01806	0.74980	1.49730 
## 
## Coefficients: 
##	Estimate Std. Error t value Pr(>|t|) 
## z.lag.1		-0.6012	0.2081	-2.89	0.00876 ** 
## --- 
## Signif. codes:	0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## 
## Residual standard error: 0.7438 on 21 degrees of freedom 
## Multiple R-squared:	0.2845, Adjusted R-squared:	0.2505 
## F-statistic: 8.351 on 1 and 21 DF,	p-value: 0.008764 
## 
## 
## Value of test-statistic is: -2.8898 
## 
## Critical values for test statistics: 
##	1pct	5pct 10pct 
## tau1 -2.66 -1.95	-1.6 

#BestModelSelection
modelname = vector(); AIC = vector(); 
for (d in c(0)){ 
for (p in c(0,1,2)){ 
for (q in c(0,1,2)){ 
temp_md <- arima(GLD10_demeaned, order=c(p,d,q)) 
modelname <- append(modelname, paste('(',p,',',d,',',q,')', sep='')) 
AIC <- append(AIC, temp_md$aic) 
} 
} 
} 
GLD10_demeaned_AIC_compare <- data.frame(cbind(modelname, AIC)) 
GLD10_demeaned_AIC_compare$AIC <- as.numeric(as.character(GLD10_demeaned_AIC_compare$AIC)) print(GLD10_demeaned_AIC_compare[order(GLD10_demeaned_AIC_compare$AIC),]) 

GLD10_demeaned_model <- arima(GLD10_demeaned, order = c(1,0,2)) summary(GLD10_demeaned_model) 

#Generate Forecast Plot

plot_forecast <- function(data_input, model, n_period){ 
temp_forecast <- forecast(model, h=n_period) 
empty_vec_org <- as.numeric(vector()) 
empty_vec_forecast <- as.numeric(vector()) 
length(empty_vec_org) <- length(temp_forecast[["x"]]) 
length(empty_vec_forecast) <- length(temp_forecast[["mean"]]) 
temp_org <- temp_forecast[["x"]] + mean(data_input) 
temp_pt_est <- temp_forecast[["mean"]] + mean(data_input) 
temp_lower <- temp_forecast[["lower"]][,2] + mean(data_input) temp_upper <- temp_forecast[["upper"]][,2]	+ mean(data_input) 
temp_org <- append(as.vector(temp_org), empty_vec_forecast) temp_pt_est <- append(empty_vec_org, as.vector(temp_pt_est)) temp_lower <- append(empty_vec_org, as.vector(temp_lower)) 
temp_upper <- append(empty_vec_org, as.vector(temp_upper)) 
plot(temp_org, type = 'l', 
ylim = c(min(min(temp_org, na.rm = T), min(temp_lower, na.rm = T)), 
max(max(temp_org, na.rm = T), max(temp_upper, na.rm = T)))) 
lines(temp_pt_est, type = 'l', col = 'blue') 
lines(temp_lower, lty = 'dashed', col = 'red') 
lines(temp_upper, lty = 'dashed', col = 'red') 
} 

GLD11_demeaned <- GLD11 - mean(GLD11) 
par(mfrow=c(2,1)) 
plot(GLD11, main = 'GLD11') 
plot(GLD11_demeaned, main='GLD11 demeaned') 

#Augemnted Dickey-Fuller Test

## classic unit root eqn: z.diff ~ z.lag1 + e 
GLD11_df_test <- ur.df(GLD11, type='none', lags=0) summary(GLD11_df_test) 

#Best Model Selection

modelname = vector(); AIC = vector(); 
for (d in c(0)){ 
for (p in c(0,1,2)){ 
for (q in c(0,1,2)){ 
temp_md <- arima(GLD11_demeaned, order=c(p,d,q)) 
modelname <- append(modelname, paste('(',p,',',d,',',q,')', sep='')) 
AIC <- append(AIC, temp_md$aic) 
} 
} 
} 
GLD11_demeaned_AIC_compare <- data.frame(cbind(modelname, AIC)) 
GLD11_demeaned_AIC_compare$AIC <- as.numeric(as.character(GLD11_demeaned_AIC_compare$AIC)) print(GLD11_demeaned_AIC_compare[order(GLD11_demeaned_AIC_compare$AIC),]) 



